1.


import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
        left = null;
        right = null;
    }
}

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] nodes = input.split(" ");
        TreeNode root = buildTree(nodes);

        int n1 = scanner.nextInt();
        int n2 = scanner.nextInt();

        TreeNode lca = lowestCommonAncestor(root, n1, n2);
        System.out.println(lca.val);
    }

    public static TreeNode buildTree(String[] nodes) {
        int n = nodes.length;
        if (n == 0) {
            return null;
        }

        TreeNode[] treeNodes = new TreeNode[n];
        for (int i = 0; i < n; i++) {
            if (!nodes[i].equals("N")) {
                treeNodes[i] = new TreeNode(Integer.parseInt(nodes[i]));
            }
        }

        for (int i = 0; i < n; i++) {
            if (treeNodes[i] != null) {
                int leftIdx = 2 * i + 1;
                int rightIdx = 2 * i + 2;
                if (leftIdx < n) {
                    treeNodes[i].left = treeNodes[leftIdx];
                }
                if (rightIdx < n) {
                    treeNodes[i].right = treeNodes[rightIdx];
                }
            }
        }

        return treeNodes[0];
    }

    public static TreeNode lowestCommonAncestor(TreeNode root, int n1, int n2) {
        if (root == null) {
            return null;
        }

        if (root.val > n1 && root.val > n2) {
            return lowestCommonAncestor(root.left, n1, n2);
        } else if (root.val < n1 && root.val < n2) {
            return lowestCommonAncestor(root.right, n1, n2);
        } else {
            return root;
        }
    }
}




2.

 
 
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v = scanner.nextInt();
        int e = scanner.nextInt();

        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < v; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < e; i++) {
            int u = scanner.nextInt();
            int w = scanner.nextInt();
            graph.get(u).add(w);
            graph.get(w).add(u); // Since the graph is undirected
        }

        boolean result = isBipartite(graph, v);
        if (result) {
            System.out.println("1");
        } else {
            System.out.println("0");
        }
    }

    public static boolean isBipartite(ArrayList<ArrayList<Integer>> graph, int v) {
        int[] colors = new int[v];
        Arrays.fill(colors, -1); // -1: Not colored, 0: Color 1, 1: Color 2

        for (int i = 0; i < v; i++) {
            if (colors[i] == -1) {
                if (!bfs(graph, i, colors)) {
                    return false;
                }
            }
        }

        return true;
    }

    public static boolean bfs(ArrayList<ArrayList<Integer>> graph, int start, int[] colors) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        colors[start] = 0;

        while (!queue.isEmpty()) {
            int current = queue.poll();

            for (int neighbor : graph.get(current)) {
                if (colors[neighbor] == -1) {
                    colors[neighbor] = 1 - colors[current];
                    queue.offer(neighbor);
                } else if (colors[neighbor] == colors[current]) {
                    return false; // Two adjacent nodes have the same color
                }
            }
        }

        return true;
    }
}



3.


import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int e = scanner.nextInt();

        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < e; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            graph.get(u).add(v);
        }

        ArrayList<Integer> bfsTraversal = bfs(graph, n);
        for (int node : bfsTraversal) {
            System.out.print(node + " ");
        }
    }

    public static ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> graph, int n) {
        ArrayList<Integer> result = new ArrayList<>();
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();

        queue.offer(0);
        visited[0] = true;

        while (!queue.isEmpty()) {
            int current = queue.poll();
            result.add(current);

            for (int neighbor : graph.get(current)) {
                if (!visited[neighbor]) {
                    queue.offer(neighbor);
                    visited[neighbor] = true;
                }
            }
        }

        return result;
    }
}
